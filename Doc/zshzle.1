.TH "ZSHZLE" "1" "June 5, 2000" "zsh 3\&.1\&.8"
.SH "NAME"
zshzle \- zsh command line editor
.\" Yodl file: Zsh/zle.yo
.SH "DESCRIPTION"
If the \fBZLE\fP option is set (which it is by default in interactive shells)
and the shell input is attached to the terminal, the user
is able to edit command lines\&.
.PP
There are two display modes\&.  The first, multiline mode, is the
default\&.  It only works if the \fBTERM\fP parameter is set to a valid
terminal type that can move the cursor up\&.  The second, single line
mode, is used if \fBTERM\fP is invalid or incapable of moving the
cursor up, or if the \fBSINGLE_LINE_ZLE\fP option is set\&.
This mode
is similar to \fBksh\fP, and uses no termcap sequences\&.  If \fBTERM\fP is
"emacs", the \fBZLE\fP option will be unset by default\&.
.SH "KEYMAPS"
A keymap in ZLE contains a set of bindings between key sequences
and ZLE commands\&.  The empty key sequence cannot be bound\&.
.PP
There can be any number of keymaps at any time, and each keymap has one
or more names\&.  If all of a keymap's names are deleted, it disappears\&.
\fBbindkey\fP can be used to manipulate keymap names\&.
.PP
Initially, there are four keymaps:
.PP
.PD 0
.TP
\fBemacs\fP
EMACS emulation
.TP
\fBviins\fP
vi emulation \- insert mode
.TP
\fBvicmd\fP
vi emulation \- command mode
.TP
\fB\&.safe\fP
fallback keymap
.PD
.PP
The `\fB\&.safe\fP' keymap is special\&.  It can never be altered, and the name
can never be removed\&.  However, it can be linked to other names, which can
be removed\&.  In the future other special keymaps may be added; users should
avoid using names beginning with `\fB\&.\fP' for their own keymaps\&.
.PP
In addition to these four names, either `\fBemacs\fP' or `\fBviins\fP' is
also linked to the name `\fBmain\fP'\&.  If one of the \fBVISUAL\fP or
\fBEDITOR\fP environment variables contain the string `\fBvi\fP' when the shell
starts up then it will be `\fBviins\fP', otherwise it will be `\fBemacs\fP'\&.
\fBbindkey\fP's \fB\-e\fP and \fB\-v\fP
options provide a convenient way to override this default choice\&.
.PP
When the editor starts up, it will select the `\fBmain\fP' keymap\&.
If that keymap doesn't exist, it will use `\fB\&.safe\fP' instead\&.
.PP
In the `\fB\&.safe\fP' keymap, each single key is bound to \fBself\-insert\fP,
except for ^J (line feed) and ^M (return) which are bound to \fBaccept\-line\fP\&.
This is deliberately not pleasant to use; if you are using it, it
means you deleted the main keymap, and you should put it back\&.
.SS "Reading Commands"
When ZLE is reading a command from the terminal, it may read a sequence
that is bound to some command and is also a prefix of a longer bound string\&.
In this case ZLE will wait a certain time to see if more characters
are typed, and if not (or they don't match any longer string) it will
execute the binding\&.  This timeout is defined by the \fBKEYTIMEOUT\fP parameter;
its default is 0\&.4 sec\&.  There is no timeout if the prefix string is not
itself bound to a command\&.
.PP
As well as ZLE commands, key sequences can be bound to other strings, by using
`\fBbindkey \-s\fP'\&.
When such a sequence is read, the replacement string is pushed back as input,
and the command reading process starts again using these fake keystrokes\&.
This input can itself invoke further replacement strings, but in order to
detect loops the process will be stopped if there are twenty such replacements
without a real command being read\&.
.SH "WIDGETS"
All actions in the editor are performed by `widgets'\&.  A widget's job is
simply to perform some small action\&.  The ZLE commands that key sequences
in keymaps are bound to are in fact widgets\&.  Widgets can be user\-defined
or built in\&.
.PP
The standard widgets built in to ZLE are listed in Standard Widgets below\&.
Other built\-in widgets can be defined by other modules (see
\fIzshmodules\fP(1))\&.  Each built\-in widget has two names: its normal canonical name, and the
same name preceded by a `\fB\&.\fP'\&.  The `\fB\&.\fP' name is special: it can't be
rebound to a different widget\&.  This makes the widget available even when
its usual name has been redefined\&.
.PP
User\-defined widgets are defined using `\fBzle \-N\fP', and implemented
as shell functions\&.  When the widget is executed, the corresponding
shell function is executed, and can perform editing (or other) actions\&.
It is recommended that user\-defined widgets should not have names
starting with `\fB\&.\fP'\&.
.SH "USER\-DEFINED WIDGETS"
User\-defined widgets, being implemented as shell functions,
can execute any normal shell command\&.  They can also run other widgets
(whether built\-in or user\-defined) using the \fBzle\fP builtin command\&.
The standard input of the function is closed to prevent external commands
from unintentionally blocking ZLE by reading from the terminal, but
\fBread \-k\fP or \fBread \-q\fP can be used to read characters\&.  Finally,
they can examine and edit the ZLE buffer being edited by
reading and setting the special parameters described below\&.
.PP
These special parameters are always available in widget functions, but
are not in any way special outside ZLE\&.  If they have some normal value
outside ZLE, that value is temporarily inaccessible, but will return
when the widget function exits\&.  These special parameters in fact have
local scope, like parameters created in a function using \fBlocal\fP\&.
.PP
Inside completion widgets and traps called while ZLE is active, these
parameters are available read\-only\&.
.PP
.PD 0
.TP
.PD
\fBBUFFER\fP (scalar)
The entire contents of the edit buffer\&.  If it is written to, the
cursor remains at the same offset, unless that would put it outside the
buffer\&.
.TP
\fBCURSOR\fP (integer)
The offset of the cursor, within the edit buffer\&.  This is in the range
0 to \fB$#BUFFER\fP, and is by definition equal to \fB$#LBUFFER\fP\&.
Attempts to move the cursor outside the buffer will result in the
cursor being moved to the appropriate end of the buffer\&.
.TP
\fBMARK\fP (integer)
Like \fBCURSOR\fP, but for the mark\&.
.TP
\fBLBUFFER\fP (scalar)
The part of the buffer that lies to the left of the cursor position\&.
If it is assigned to, only that part of the buffer is replaced, and the
cursor remains between the new \fB$LBUFFER\fP and the old \fB$RBUFFER\fP\&.
.TP
\fBRBUFFER\fP (scalar)
The part of the buffer that lies to the right of the cursor position\&.
If it is assigned to, only that part of the buffer is replaced, and the
cursor remains between the old \fB$LBUFFER\fP and the new \fB$RBUFFER\fP\&.
.TP
\fBBUFFERLINES\fP
The number of screen lines needed for the edit buffer currently
displayed on screen (i\&.e\&. without any changes to the preceding
parameters done after the last redisplay)\&.
.TP
\fBPREBUFFER\fP (scalar)
In a multi\-line input at the secondary prompt, this read\-only parameter
contains the contents of the lines before the one the cursor is
currently in\&.
.TP
\fBWIDGET\fP (scalar)
The name of the widget currently being executed\&.
.TP
\fBLASTWIDGET\fP (scalar)
The name of the last widget that was executed\&.
.TP
\fBKEYS\fP (scalar)
The keys typed to invoke this widget, as a literal string\&.
.TP
\fBNUMERIC\fP (integer)
The numeric argument\&. If no numeric argument was given, this parameter
is unset\&. When this is set inside a widget function, builtin widgets
called with the \fBzle\fP builtin command will use the value
assigned\&. If it is unset inside a widget function, builtin widgets
called behave as if no numeric argument was given\&.
.TP
\fBHISTNO\fP (integer)
The current history number\&.
.TP
\fBPENDING\fP (integer)
The number of bytes pending for input, i\&.e\&. the number of bytes which have
already been typed and can immediately be read\&. On systems where the shell
is not able to get this information, this parameter will always have a
value of zero\&.
.SH "STANDARD WIDGETS"
The following is a list of all the standard widgets,
and their default bindings in emacs mode,
vi command mode and vi insert mode
(the `\fBemacs\fP', `\fBvicmd\fP' and `\fBviins\fP' keymaps, respectively)\&.
.SS "Movement"
.PD 0
.TP
.PD
\fBvi\-backward\-blank\-word\fP (unbound) (B) (unbound)
Move backward one word, where a word is defined as a series of
non\-blank characters\&.
.TP
\fBbackward\-char\fP (^B ESC\-[D) (unbound) (unbound)
Move backward one character\&.
.TP
\fBvi\-backward\-char\fP (unbound) (^H h ^?) (unbound)
Move backward one character, without changing lines\&.
.TP
\fBbackward\-word\fP (ESC\-B ESC\-b) (unbound) (unbound)
Move to the beginning of the previous word\&.
.TP
\fBemacs\-backward\-word\fP
Move to the beginning of the previous word\&.
.TP
\fBvi\-backward\-word\fP (unbound) (b) (unbound)
Move to the beginning of the previous word, vi\-style\&.
.TP
\fBbeginning\-of\-line\fP (^A) (unbound) (unbound)
Move to the beginning of the line\&.  If already at the beginning
of the line, move to the beginning of the previous line, if any\&.
.TP
\fBvi\-beginning\-of\-line\fP
Move to the beginning of the line, without changing lines\&.
.TP
\fBend\-of\-line\fP (^E) (unbound) (unbound)
Move to the end of the line\&.  If already at the end
of the line, move to the end of the next line, if any\&.
.TP
\fBvi\-end\-of\-line\fP (unbound) ($) (unbound)
Move to the end of the line\&.
If an argument is given to this command, the cursor will be moved to
the end of the line (argument \- 1) lines down\&.
.TP
\fBvi\-forward\-blank\-word\fP (unbound) (W) (unbound)
Move forward one word, where a word is defined as a series of
non\-blank characters\&.
.TP
\fBvi\-forward\-blank\-word\-end\fP (unbound) (E) (unbound)
Move to the end of the current word, or, if at the end of the current word,
to the end of the next word,
where a word is defined as a series of non\-blank characters\&.
.TP
\fBforward\-char\fP (^F ESC\-[C) (unbound) (unbound)
Move forward one character\&.
.TP
\fBvi\-forward\-char\fP (unbound) (space l) (unbound)
Move forward one character\&.
.TP
\fBvi\-find\-next\-char\fP (^X^F) (f) (unbound)
Read a character from the keyboard, and move to
the next occurrence of it in the line\&.
.TP
\fBvi\-find\-next\-char\-skip\fP (unbound) (t) (unbound)
Read a character from the keyboard, and move to
the position just before the next occurrence of it in the line\&.
.TP
\fBvi\-find\-prev\-char\fP (unbound) (F) (unbound)
Read a character from the keyboard, and move to
the previous occurrence of it in the line\&.
.TP
\fBvi\-find\-prev\-char\-skip\fP (unbound) (T) (unbound)
Read a character from the keyboard, and move to
the position just after the previous occurrence of it in the line\&.
.TP
\fBvi\-first\-non\-blank\fP (unbound) (^) (unbound)
Move to the first non\-blank character in the line\&.
.TP
\fBvi\-forward\-word\fP (unbound) (w) (unbound)
Move forward one word, vi\-style\&.
.TP
\fBforward\-word\fP (ESC\-F ESC\-f) (unbound) (unbound)
Move to the beginning of the next word\&.
The editor's idea of a word is specified with the \fBWORDCHARS\fP
parameter\&.
.TP
\fBemacs\-forward\-word\fP
Move to the end of the next word\&.
.TP
\fBvi\-forward\-word\-end\fP (unbound) (e) (unbound)
Move to the end of the next word\&.
.TP
\fBvi\-goto\-column\fP (ESC\-|) (|) (unbound)
Move to the column specified by the numeric argument\&.
.TP
\fBvi\-goto\-mark\fP (unbound) (`) (unbound)
Move to the specified mark\&.
.TP
\fBvi\-goto\-mark\-line\fP (unbound) (') (unbound)
Move to beginning of the line containing the specified mark\&.
.TP
\fBvi\-repeat\-find\fP (unbound) (;) (unbound)
Repeat the last \fBvi\-find\fP command\&.
.TP
\fBvi\-rev\-repeat\-find\fP (unbound) (,) (unbound)
Repeat the last \fBvi\-find\fP command in the opposite direction\&.
.SS "History Control"
.PD 0
.TP
.PD
\fBbeginning\-of\-buffer\-or\-history\fP (ESC\-<) (unbound) (unbound)
Move to the beginning of the buffer, or if already there,
move to the first event in the history list\&.
.TP
\fBbeginning\-of\-line\-hist\fP
Move to the beginning of the line\&.  If already at the
beginning of the buffer, move to the previous history line\&.
.TP
\fBbeginning\-of\-history\fP
Move to the first event in the history list\&.
.TP
\fBdown\-line\-or\-history\fP (^N ESC\-[B) (j) (unbound)
Move down a line in the buffer, or if already at the bottom line,
move to the next event in the history list\&.
.TP
\fBvi\-down\-line\-or\-history\fP (unbound) (+) (unbound)
Move down a line in the buffer, or if already at the bottom line,
move to the next event in the history list\&.
Then move to the first non\-blank character on the line\&.
.TP
\fBdown\-line\-or\-search\fP
Move down a line in the buffer, or if already at the bottom line,
search forward in the history for a line beginning with the first
word in the buffer\&.
.RS
.PP
If called from a function by the \fBzle\fP command with arguments, the first
argument is taken as the string for which to search, rather than the
first word in the buffer\&.
.RE
.TP
\fBdown\-history\fP (unbound) (^N) (unbound)
Move to the next event in the history list\&.
.TP
\fBhistory\-beginning\-search\-backward\fP
Search backward in the history for a line beginning with the current
line up to the cursor\&.
This leaves the cursor in its original position\&.
.TP
\fBend\-of\-buffer\-or\-history\fP (ESC\->) (unbound) (unbound)
Move to the end of the buffer, or if already there,
move to the last event in the history list\&.
.TP
\fBend\-of\-line\-hist\fP
Move to the end of the line\&.  If already at the end of
the buffer, move to the next history line\&.
.TP
\fBend\-of\-history\fP
Move to the last event in the history list\&.
.TP
\fBvi\-fetch\-history\fP (unbound) (G) (unbound)
Fetch the history line specified by the numeric argument\&.
This defaults to the current history line
(i\&.e\&. the one that isn't history yet)\&.
.TP
\fBhistory\-incremental\-search\-backward\fP (^R ^Xr) (unbound) (unbound)
Search backward incrementally for a specified string\&.  The search is
case\-insensitive if the search string does not have uppercase letters and no
numeric argument was given\&.  The string may begin with `\fB^\fP' to anchor the
search to the beginning of the line\&.
.RS
.PP
A restricted set of editing functions
is available in the mini\-buffer\&.  An interrupt signal, as defined by the stty
setting, will stop the search and go back to the original line\&.  An undefined
key will have the same effect\&. The supported functions are:
\fBbackward\-delete\-char\fP,
\fBvi\-backward\-delete\-char\fP,
\fBclear\-screen\fP,
\fBredisplay\fP,
\fBquoted\-insert\fP,
\fBvi\-quoted\-insert\fP,
\fBaccept\-and\-hold\fP,
\fBaccept\-and\-infer\-next\-history\fP,
\fBaccept\-line\fP and
\fBaccept\-line\-and\-down\-history\fP\&.
.PP
\fBmagic\-space\fP just inserts a space\&.
\fBvi\-cmd\-mode\fP toggles between the `\fBmain\fP' and `\fBvicmd\fP' keymaps;
the `\fBmain\fP' keymap (insert mode) will be selected initially\&.
\fBhistory\-incremental\-search\-backward\fP will get the
next occurrence of the contents of the mini\-buffer\&.
\fBhistory\-incremental\-search\-forward\fP inverts the sense of the search\&.
\fBvi\-repeat\-search\fP and \fBvi\-rev\-repeat\-search\fP are similarly supported\&.
The direction of the search is indicated in the mini\-buffer\&.
.PP
Any multi\-character string
that is not bound to one of the above functions will beep and interrupt the
search, leaving the last found line in the buffer\&. Any single character that
is not bound to one of the above functions, or \fBself\-insert\fP or
\fBself\-insert\-unmeta\fP, will have the same effect but the function will be
executed\&.
.PP
When called from a widget function by the \fBzle\fP command, the incremental
search commands can take a string argument\&.  This will be treated as a
string of keys, as for arguments to the \fBbindkey\fP command, and used as
initial input for the command\&.  Any characters in the string which are
unused by the incremental search will be silently ignored\&.  For example,
.PP
.RS
.nf
\fBzle history\-incremental\-search\-backward forceps\fP
.fi
.RE
.PP
will search backwards for \fBforceps\fP, leaving the minibuffer containing
the string `\fBforceps\fP'\&.
.RE
.TP
\fBhistory\-incremental\-search\-forward\fP (^S ^Xs) (unbound) (unbound)
Search forward incrementally for a specified string\&.  The search is
case\-insensitive if the search string does not have uppercase letters and no
numeric argument was given\&.  The string may begin with `\fB^\fP' to anchor the
search to the beginning of the line\&.  The functions available in the
mini\-buffer are the same as for \fBhistory\-incremental\-search\-backward\fP\&.
.TP
\fBhistory\-search\-backward\fP (ESC\-P ESC\-p) (unbound) (unbound)
Search backward in the history for a line beginning with the first
word in the buffer\&.
.RS
.PP
If called from a function by the \fBzle\fP command with arguments, the first
argument is taken as the string for which to search, rather than the
first word in the buffer\&.
.RE
.TP
\fBvi\-history\-search\-backward\fP (unbound) (/) (unbound)
Search backward in the history for a specified string\&.
The string may begin with `\fB^\fP' to anchor the search to the
beginning of the line\&.
.RS
.PP
A restricted set of editing functions is available in
the mini\-buffer\&.  An interrupt signal, as defined by the stty setting,  will
stop the search\&.
The functions available in the mini\-buffer are:
\fBaccept\-line\fP,
\fBbackward\-delete\-char\fP,
\fBvi\-backward\-delete\-char\fP,
\fBbackward\-kill\-word\fP,
\fBvi\-backward\-kill\-word\fP,
\fBclear\-screen\fP,
\fBredisplay\fP,
\fBquoted\-insert\fP
and
\fBvi\-quoted\-insert\fP\&.
.PP
\fBvi\-cmd\-mode\fP is treated the same as accept\-line, and
\fBmagic\-space\fP is treated as a space\&.
Any other character that is not bound to self\-insert or
self\-insert\-unmeta will beep and be ignored\&. If the function is called from vi
command mode, the bindings of the current insert mode will be used\&.
.PP
If called from a function by the \fBzle\fP command with arguments, the first
argument is taken as the string for which to search, rather than the
first word in the buffer\&.
.RE
.TP
\fBhistory\-search\-forward\fP (ESC\-N ESC\-n) (unbound) (unbound)
Search forward in the history for a line beginning with the first
word in the buffer\&.
.RS
.PP
If called from a function by the \fBzle\fP command with arguments, the first
argument is taken as the string for which to search, rather than the
first word in the buffer\&.
.RE
.TP
\fBvi\-history\-search\-forward\fP (unbound) (?) (unbound)
Search forward in the history for a specified string\&.
The string may begin with `\fB^\fP' to anchor the search to the
beginning of the line\&. The functions available in the mini\-buffer are the same
as for \fBvi\-history\-search\-backward\fP\&.  Argument handling is also the same
as for that command\&.
.TP
\fBinfer\-next\-history\fP (^X^N) (unbound) (unbound)
Search in the history list for a line matching the current one and
fetch the event following it\&.
.TP
\fBinsert\-last\-word\fP (ESC\-_ ESC\-\&.) (unbound) (unbound)
Insert the last word from the previous history event at the
cursor position\&.  If a positive numeric argument is given,
insert that word from the end of the previous history event\&.
If the argument is zero or negative insert that word from the
left (zero inserts the previous command word)\&.  Repeating this command
replaces the word just inserted with the last word from the
history event prior to the one just used; numeric arguments can be used in
the same way to pick a word from that event\&.
.TP
\fBvi\-repeat\-search\fP (unbound) (n) (unbound)
Repeat the last vi history search\&.
.TP
\fBvi\-rev\-repeat\-search\fP (unbound) (N) (unbound)
Repeat the last vi history search, but in reverse\&.
.TP
\fBup\-line\-or\-history\fP (^P ESC\-[A) (k) (unbound)
Move up a line in the buffer, or if already at the top line,
move to the previous event in the history list\&.
.TP
\fBvi\-up\-line\-or\-history\fP (unbound) (\-) (unbound)
Move up a line in the buffer, or if already at the top line,
move to the previous event in the history list\&.
Then move to the first non\-blank character on the line\&.
.TP
\fBup\-line\-or\-search\fP
Move up a line in the buffer, or if already at the top line,
search backward in the history for a line beginning with the
first word in the buffer\&.
.RS
.PP
If called from a function by the \fBzle\fP command with arguments, the first
argument is taken as the string for which to search, rather than the
first word in the buffer\&.
.RE
.TP
\fBup\-history\fP (unbound) (^P) (unbound)
Move to the previous event in the history list\&.
.TP
\fBhistory\-beginning\-search\-forward\fP
Search forward in the history for a line beginning with the current
line up to the cursor\&.
This leaves the cursor in its original position\&.
.SS "Modifying Text"
.PD 0
.TP
.PD
\fBvi\-add\-eol\fP (unbound) (A) (unbound)
Move to the end of the line and enter insert mode\&.
.TP
\fBvi\-add\-next\fP (unbound) (a) (unbound)
Enter insert mode after the current cursor position, without changing lines\&.
.TP
\fBbackward\-delete\-char\fP (^H ^?) (unbound) (unbound)
Delete the character behind the cursor\&.
.TP
\fBvi\-backward\-delete\-char\fP (unbound) (X) (^H)
Delete the character behind the cursor, without changing lines\&.
If in insert mode, this won't delete past the point where insert mode was
last entered\&.
.TP
\fBbackward\-delete\-word\fP
Delete the word behind the cursor\&.
.TP
\fBbackward\-kill\-line\fP
Kill from the beginning of the line to the cursor position\&.
.TP
\fBbackward\-kill\-word\fP (^W ESC\-^H ESC\-^?) (unbound) (unbound)
Kill the word behind the cursor\&.
.TP
\fBvi\-backward\-kill\-word\fP (unbound) (unbound) (^W)
Kill the word behind the cursor, without going past the point where insert
mode was last entered\&.
.TP
\fBcapitalize\-word\fP (ESC\-C ESC\-c) (unbound) (unbound)
Capitalize the current word and move past it\&.
.TP
\fBvi\-change\fP (unbound) (c) (unbound)
Read a movement command from the keyboard, and kill
from the cursor position to the endpoint of the movement\&.
Then enter insert mode\&.
If the command is \fBvi\-change\fP, change the current line\&.
.TP
\fBvi\-change\-eol\fP (unbound) (C) (unbound)
Kill to the end of the line and enter insert mode\&.
.TP
\fBvi\-change\-whole\-line\fP (unbound) (S) (unbound)
Kill the current line and enter insert mode\&.
.TP
\fBcopy\-region\-as\-kill\fP (ESC\-W ESC\-w) (unbound) (unbound)
Copy the area from the cursor to the mark to the kill buffer\&.
.TP
\fBcopy\-prev\-word\fP (ESC\-^_) (unbound) (unbound)
Duplicate the word to the left of the cursor\&.
.TP
\fBcopy\-prev\-shell\-word\fP (ESC\-^_) (unbound) (unbound)
Like \fBcopy\-prev\-word\fP, but the word is found by using shell parsing, 
whereas \fBcopy\-prev\-word\fP looks for blanks\&. This makes a difference
when the word is quoted and contains spaces\&.
.TP
\fBvi\-delete\fP (unbound) (d) (unbound)
Read a movement command from the keyboard, and kill
from the cursor position to the endpoint of the movement\&.
If the command is \fBvi\-delete\fP, kill the current line\&.
.TP
\fBdelete\-char\fP
Delete the character under the cursor\&.
.TP
\fBvi\-delete\-char\fP (unbound) (x) (unbound)
Delete the character under the cursor,
without going past the end of the line\&.
.TP
\fBdelete\-word\fP
Delete the current word\&.
.TP
\fBdown\-case\-word\fP (ESC\-L ESC\-l) (unbound) (unbound)
Convert the current word to all lowercase and move past it\&.
.TP
\fBkill\-word\fP (ESC\-D ESC\-d) (unbound) (unbound)
Kill the current word\&.
.TP
\fBgosmacs\-transpose\-chars\fP
Exchange the two characters behind the cursor\&.
.TP
\fBvi\-indent\fP (unbound) (>) (unbound)
Indent a number of lines\&.
.TP
\fBvi\-insert\fP (unbound) (i) (unbound)
Enter insert mode\&.
.TP
\fBvi\-insert\-bol\fP (unbound) (I) (unbound)
Move to the first non\-blank character on the line and enter insert mode\&.
.TP
\fBvi\-join\fP (^X^J) (J) (unbound)
Join the current line with the next one\&.
.TP
\fBkill\-line\fP (^K) (unbound) (unbound)
Kill from the cursor to the end of the line\&.
If already on the end of the line, kill the newline character\&.
.TP
\fBvi\-kill\-line\fP (unbound) (unbound) (^U)
Kill from the cursor back to wherever insert mode was last entered\&.
.TP
\fBvi\-kill\-eol\fP (unbound) (D) (unbound)
Kill from the cursor to the end of the line\&.
.TP
\fBkill\-region\fP
Kill from the cursor to the mark\&.
.TP
\fBkill\-buffer\fP (^X^K) (unbound) (unbound)
Kill the entire buffer\&.
.TP
\fBkill\-whole\-line\fP (^U) (unbound) (unbound)
Kill the current line\&.
.TP
\fBvi\-match\-bracket\fP (^X^B) (%) (unbound)
Move to the bracket character (one of \fB{}\fP, \fB()\fP or \fB[]\fP) that
matches the one under the cursor\&.
If the cursor is not on a bracket character, move forward without going
past the end of the line to find one, and then go to the matching bracket\&.
.TP
\fBvi\-open\-line\-above\fP (unbound) (O) (unbound)
Open a line above the cursor and enter insert mode\&.
.TP
\fBvi\-open\-line\-below\fP (unbound) (o) (unbound)
Open a line below the cursor and enter insert mode\&.
.TP
\fBvi\-oper\-swap\-case\fP
Read a movement command from the keyboard, and swap
the case of all characters
from the cursor position to the endpoint of the movement\&.
If the movement command is \fBvi\-oper\-swap\-case\fP,
swap the case of all characters on the current line\&.
.TP
\fBoverwrite\-mode\fP (^X^O) (unbound) (unbound)
Toggle between overwrite mode and insert mode\&.
.TP
\fBvi\-put\-before\fP (unbound) (P) (unbound)
Insert the contents of the kill buffer before the cursor\&.
If the kill buffer contains a sequence of lines (as opposed to characters),
paste it above the current line\&.
.TP
\fBvi\-put\-after\fP (unbound) (p) (unbound)
Insert the contents of the kill buffer after the cursor\&.
If the kill buffer contains a sequence of lines (as opposed to characters),
paste it below the current line\&.
.TP
\fBquoted\-insert\fP (^V) (unbound) (unbound)
Insert the next character typed into the buffer literally\&.
An interrupt character will not be inserted\&.
.TP
\fBvi\-quoted\-insert\fP (unbound) (unbound) (^Q ^V)
Display a `\fB^\fP' at the cursor position, and
insert the next character typed into the buffer literally\&.
An interrupt character will not be inserted\&.
.TP
\fBquote\-line\fP (ESC\-') (unbound) (unbound)
Quote the current line; that is, put a `\fB'\fP' character at the
beginning and the end, and convert all `\fB'\fP' characters
to `\fB'\e''\fP'\&.
.TP
\fBquote\-region\fP (ESC\-") (unbound) (unbound)
Quote the region from the cursor to the mark\&.
.TP
\fBvi\-replace\fP (unbound) (R) (unbound)
Enter overwrite mode\&.
.TP
\fBvi\-repeat\-change\fP (unbound) (\&.) (unbound)
Repeat the last vi mode text modification\&.
If a count was used with the modification, it is remembered\&.
If a count is given to this command, it overrides the remembered count,
and is remembered for future uses of this command\&.
The cut buffer specification is similarly remembered\&.
.TP
\fBvi\-replace\-chars\fP (unbound) (r) (unbound)
Replace the character under the cursor with a character
read from the keyboard\&.
.TP
\fBself\-insert\fP (printable characters) (unbound) (printable characters and some control characters)
Insert a character into the buffer at the cursor position\&.
.TP
\fBself\-insert\-unmeta\fP (ESC\-^I ESC\-^J ESC\-^M) (unbound) (unbound)
Insert a character into the buffer after stripping the meta bit
and converting ^M to ^J\&.
.TP
\fBvi\-substitute\fP (unbound) (s) (unbound)
Substitute the next character(s)\&.
.TP
\fBvi\-swap\-case\fP (unbound) (~) (unbound)
Swap the case of the character under the cursor and move past it\&.
.TP
\fBtranspose\-chars\fP (^T) (unbound) (unbound)
Exchange the two characters to the left of the
cursor if at end of line, else exchange the
character under the cursor with the character
to the left\&.
.TP
\fBtranspose\-words\fP (ESC\-T ESC\-t) (unbound) (unbound)
Exchange the current word with the one before it\&.
.TP
\fBvi\-unindent\fP (unbound) (<) (unbound)
Unindent a number of lines\&.
.TP
\fBup\-case\-word\fP (ESC\-U ESC\-u) (unbound) (unbound)
Convert the current word to all caps and move past it\&.
.TP
\fByank\fP (^Y) (unbound) (unbound)
Insert the contents of the kill buffer at the cursor position\&.
.TP
\fByank\-pop\fP (ESC\-y) (unbound) (unbound)
Remove the text just yanked, rotate the kill\-ring,
and yank the new top\&.  Only works following
\fByank\fP or \fByank\-pop\fP\&.
.TP
\fBvi\-yank\fP (unbound) (y) (unbound)
Read a movement command from the keyboard, and copy the region
from the cursor position to the endpoint of the movement
into the kill buffer\&.
If the command is \fBvi\-yank\fP, copy the current line\&.
.TP
\fBvi\-yank\-whole\-line\fP (unbound) (Y) (unbound)
Copy the current line into the kill buffer\&.
.TP
\fBvi\-yank\-eol\fP
Copy the region from the cursor position to the end of the line
into the kill buffer\&.
Arguably, this is what Y should do in vi, but it isn't what it actually does\&.
.SS "Arguments"
.PD 0
.TP
.PD
\fBdigit\-argument\fP (ESC\-0\&.\&.ESC\-9) (1\-9) (unbound)
Start a new numeric argument, or add to the current one\&.
See also \fBvi\-digit\-or\-beginning\-of\-line\fP\&.  This only works if bound to a
key sequence ending in a decimal digit\&.
.RS
.PP
Inside a widget function, a call to this function treats the last key of
the key sequence which called the widget as the digit\&.
.RE
.TP
\fBneg\-argument\fP (ESC\-\-) (unbound) (unbound)
Changes the sign of the following argument\&.
.TP
\fBuniversal\-argument\fP
Multiply the argument of the next command by 4\&.  Alternatively, if
this command is followed by an integer (positive or negative), use
that as the argument for the next command\&.  Thus digits cannot be
repeated using this command\&.  For example, if this command occurs
twice, followed immediately by \fBforward\-char\fP, move forward sixteen
spaces; if instead it is followed by \fB\-2\fP, then \fBforward\-char\fP,
move backward two spaces\&.
.RS
.PP
Inside a widget function, if passed an argument, i\&.e\&. `\fBzle
universal\-argument\fP \fInum\fP', the numerical argument will be set to
\fInum\fP; this is equivalent to `\fBNUMERIC=\fP\fInum\fP'\&.
.RE
.RE
.SS "Completion"
.PD 0
.TP
.PD
\fBaccept\-and\-menu\-complete\fP
In a menu completion, insert the current completion into the buffer,
and advance to the next possible completion\&.
.TP
\fBcomplete\-word\fP
Attempt completion on the current word\&.
.TP
\fBdelete\-char\-or\-list\fP (^D) (unbound) (unbound)
Delete the character under the cursor\&.  If the cursor
is at the end of the line, list possible completions for the
current word\&.
.TP
\fBexpand\-cmd\-path\fP
Expand the current command to its full pathname\&.
.TP
\fBexpand\-or\-complete\fP (TAB) (unbound) (TAB)
Attempt shell expansion on the current word\&.
If that fails,
attempt completion\&.
.TP
\fBexpand\-or\-complete\-prefix\fP
Attempt shell expansion on the current word up to cursor\&.
.TP
\fBexpand\-history\fP (ESC\-space ESC\-!) (unbound) (unbound)
Perform history expansion on the edit buffer\&.
.TP
\fBexpand\-word\fP (^X*) (unbound) (unbound)
Attempt shell expansion on the current word\&.
.TP
\fBlist\-choices\fP (ESC\-^D) (^D =) (^D)
List possible completions for the current word\&.
.TP
\fBlist\-expand\fP (^Xg ^XG) (^G) (^G)
List the expansion of the current word\&.
.TP
\fBmagic\-space\fP
Perform history expansion and insert a space into the
buffer\&.  This is intended to be bound to space\&.
.TP
\fBmenu\-complete\fP
Like \fBcomplete\-word\fP, except that menu completion is used\&.
See the \fBMENU_COMPLETE\fP option\&.
.TP
\fBmenu\-expand\-or\-complete\fP
Like \fBexpand\-or\-complete\fP, except that menu completion is used\&.
.TP
\fBreverse\-menu\-complete\fP
Perform menu completion, like \fBmenu\-complete\fP, except that if
a menu completion is already in progress, move to the \fIprevious\fP
completion rather than the next\&.
.TP
\fBend\-of\-list\fP
When a previous completion displayed a list below the prompt, this
widget can be used to move the prompt below the list\&.
.SS "Miscellaneous"
.PD 0
.TP
.PD
\fBaccept\-and\-hold\fP (ESC\-A ESC\-a) (unbound) (unbound)
Push the contents of the buffer on the buffer stack
and execute it\&.
.TP
\fBaccept\-and\-infer\-next\-history\fP
Execute the contents of the buffer\&.
Then search the history list for a line matching the current one
and push the event following onto the buffer stack\&.
.TP
\fBaccept\-line\fP (^J ^M) (^J ^M) (^J ^M)
Finish editing the buffer\&.  Normally this causes the buffer to be
executed as a shell command\&.
.TP
\fBaccept\-line\-and\-down\-history\fP (^O) (unbound) (unbound)
Execute the current line, and push the next history
event on the the buffer stack\&.
.TP
\fBbeep\fP
Beep, unless the \fBBEEP\fP option is unset\&.
.TP
\fBvi\-cmd\-mode\fP (^X^V) (unbound) (^[)
Enter command mode; that is, select the `\fBvicmd\fP' keymap\&.
Yes, this is bound by default in emacs mode\&.
.TP
\fBvi\-caps\-lock\-panic\fP
Hang until any lowercase key is pressed\&.
This is for vi users without the mental capacity to keep
track of their caps lock key (like the author)\&.
.TP
\fBclear\-screen\fP (^L ESC\-^L) (^L) (^L)
Clear the screen and redraw the prompt\&.
.TP
\fBdescribe\-key\-briefly\fP
Reads a key sequence, then prints the function bound to that sequence\&.
.TP
\fBexchange\-point\-and\-mark\fP (^X^X) (unbound) (unbound)
Exchange the cursor position with the position of the mark\&.
.TP
\fBexecute\-named\-cmd\fP (ESC\-x) (unbound) (unbound)
Read the name of an editor command and
execute it\&.  A restricted set of editing functions is available in the
mini\-buffer\&.  An interrupt signal, as defined by the stty setting, will
abort the function\&. The allowed functions are:
\fBbackward\-delete\-char\fP,
\fBvi\-backward\-delete\-char\fP,
\fBclear\-screen\fP,
\fBredisplay\fP,
\fBquoted\-insert\fP,
\fBvi\-quoted\-insert\fP,
\fBbackward\-kill\-word\fP,
\fBvi\-backward\-kill\-word\fP,
\fBkill\-whole\-line\fP,
\fBvi\-kill\-line\fP,
\fBbackward\-kill\-line\fP,
\fBlist\-choices\fP,
\fBdelete\-char\-or\-list\fP,
\fBcomplete\-word\fP,
\fBaccept\-line\fP,
\fBexpand\-or\-complete\fP and
\fBexpand\-or\-complete\-prefix\fP\&.
.RS
.PP
\fBkill\-region\fP kills the last word,
and vi\-cmd\-mode is treated the same as accept\-line\&.
The space and tab characters, if not bound to one of
these functions, will complete the name and then list the
possibilities if the \fBAUTO_LIST\fP option is set\&.
Any other character that is not bound to \fBself\-insert\fP or
\fBself\-insert\-unmeta\fP will beep and be ignored\&.
The bindings of the current insert mode will be used\&.
.RE
.TP
\fBexecute\-last\-named\-cmd\fP (ESC\-z) (unbound) (unbound)
Redo the last function executed with \fBexecute\-named\-cmd\fP\&.
.TP
\fBget\-line\fP (ESC\-G ESC\-g) (unbound) (unbound)
Pop the top line off the buffer stack and insert it at the
cursor position\&.
.TP
\fBpound\-insert\fP (unbound) (#) (unbound)
If there is no # character at the beginning of the buffer,
add one to the beginning of each line\&.
If there is one, remove a # from each line that has one\&.
In either case, accept the current line\&.
The \fBINTERACTIVE_COMMENTS\fP option must be set
for this to have any usefulness\&.
.TP
\fBvi\-pound\-insert\fP
If there is no # character at the beginning of the current line,
add one\&.  If there is one, remove it\&.
The \fBINTERACTIVE_COMMENTS\fP option must be set
for this to have any usefulness\&.
.TP
\fBpush\-input\fP
Push the entire current multiline construct onto the buffer stack and
return to the top\-level (\fBPS1\fP) prompt\&.
If the current parser construct is only a single line, this is exactly
like \fBpush\-line\fP\&.
Next time the editor starts up or is popped with \fBget\-line\fP, the
construct will be popped off the top of the buffer stack and loaded
into the editing buffer\&.
.TP
\fBpush\-line\fP (^Q ESC\-Q ESC\-q) (unbound) (unbound)
Push the current buffer onto the buffer stack and clear
the buffer\&.
Next time the editor starts up, the buffer will be popped
off the top of the buffer stack and loaded into the editing
buffer\&.
.TP
\fBpush\-line\-or\-edit\fP
At the top\-level (\fBPS1\fP) prompt, equivalent to \fBpush\-line\fP\&.
At a secondary (\fBPS2\fP) prompt, move the entire current multiline
construct into the editor buffer\&.
The latter is equivalent to \fBpush\-input\fP followed by \fBget\-line\fP\&.
.TP
\fBredisplay\fP (unbound) (^R) (^R)
Redisplays the edit buffer\&.
.TP
\fBsend\-break\fP (^G ESC\-^G) (unbound) (unbound)
Abort the current editor function, e\&.g\&. \fBexecute\-named\-command\fP, or the
editor itself, e\&.g\&. if you are in \fBvared\fP\&. Otherwise abort the parsing of
the current line\&.
.TP
\fBrun\-help\fP (ESC\-H ESC\-h) (unbound) (unbound)
Push the buffer onto the buffer stack, and execute the
command `\fBrun\-help\fP \fIcmd\fP', where \fIcmd\fP is the current
command\&.  \fBrun\-help\fP is normally aliased to \fIman\fP\&.
.TP
\fBvi\-set\-buffer\fP (unbound) (") (unbound)
Specify a buffer to be used in the following command\&.
There are 35 buffers that can be specified:
the 26 `named' buffers \fB"a\fP to \fB"z\fP
and the nine `queued' buffers \fB"1\fP to \fB"9\fP\&.  The named buffers can also
be specified as \fB"A\fP to \fB"Z\fP\&.
.RS
.PP
When a buffer is specified for a cut command, the text being cut replaces
the previous contents of the specified buffer\&.  If a named buffer
is specified using a capital, the newly cut text is appended to the buffer
instead of overwriting it\&.
.PP
If no buffer is specified for a cut command, \fB"1\fP is used, and the
contents of \fB"1\fP to \fB"8\fP are each shifted along one buffer; the contents of
\fB"9\fP is lost\&.
.RE
.TP
\fBvi\-set\-mark\fP (unbound) (m) (unbound)
Set the specified mark at the cursor position\&.
.TP
\fBset\-mark\-command\fP (^@) (unbound) (unbound)
Set the mark at the cursor position\&.
.TP
\fBspell\-word\fP (ESC\-$ ESC\-S ESC\-s) (unbound) (unbound)
Attempt spelling correction on the current word\&.
.TP
\fBundefined\-key\fP
This command is executed when a key sequence that is not bound to any
command is typed\&.  By default it beeps\&.
.TP
\fBundo\fP (^_ ^Xu ^X^U) (unbound) (unbound)
Incrementally undo the last text modification\&.
.TP
\fBredo\fP
Incrementally redo undone text modifications\&.
.TP
\fBvi\-undo\-change\fP (unbound) (u) (unbound)
Undo the last text modification\&.
If repeated, redo the modification\&.
.TP
\fBwhat\-cursor\-position\fP (^X=) (unbound) (unbound)
Print the character under the cursor, its code as an octal, decimal and
hexadecimal number, the current cursor position within the buffer and the
column of the cursor in the current line\&.
.TP
\fBwhere\-is\fP
Read the name of an editor command and and print the listing of key
sequences that invoke the specified command\&.
.TP
\fBwhich\-command\fP (ESC\-?) (unbound) (unbound)
Push the buffer onto the buffer stack, and execute the
command `\fBwhich\-command\fP \fIcmd\fP'\&. where \fIcmd\fP is the current
command\&.  \fBwhich\-command\fP is normally aliased to \fIwhence\fP\&.
.TP
\fBvi\-digit\-or\-beginning\-of\-line\fP (unbound) (0) (unbound)
If the last command executed was a digit as part of an argument,
continue the argument\&.  Otherwise, execute vi\-beginning\-of\-line\&.
